import React, { useState } from 'react';
import { Layout, Row, Col, Input, Button, List, Checkbox, Typography, Modal, Form, Input as InputAnt, message, Space } from 'antd';

const { Header, Content, Footer } = Layout;
const { Title } = Typography;

// TodoInput Component
const TodoInput = ({ onAddTodo }) => {
  const [newTodoText, setNewTodoText] = useState('');

  const handleInputChange = (e) => {
    setNewTodoText(e.target.value);
  };

  const handleSubmit = () => {
    if (newTodoText.trim() !== '') {
      onAddTodo({
        text: newTodoText.trim(),
        completed: false,
        id: Date.now(), // 添加一个唯一的 id
      });
      setNewTodoText('');
    }
  };

  return (
    <div>
      <Input.Group compact>
        <Input
          placeholder="Add new task"
          value={newTodoText}
          onChange={handleInputChange}
        />
        <Button type="primary" onClick={handleSubmit}>
          Add
        </Button>
      </Input.Group>
    </div>
  );
};

// TodoList Component
const TodoList = ({ todos, onDeleteTodo, onToggleComplete, onEditTodo, filter, setFilter, onDeleteDone, onDeleteAll }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editingTodo, setEditingTodo] = useState(null);

  const handleEditTodo = (todo) => {
    setIsEditing(true);
    setEditingTodo(todo);
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditingTodo(null);
  };

  const handleSaveEdit = (values) => {
    onEditTodo(editingTodo.id, values.text);
    setIsEditing(false);
    setEditingTodo(null);
  };

  const filteredTodos = filter === 'all'
    ? todos
    : filter === 'completed'
    ? todos.filter((todo) => todo.completed)
    : todos.filter((todo) => !todo.completed);

  return (
    <div>
      <Title level={3}>To-Do List</Title>
      <List
        itemLayout="horizontal"
        dataSource={filteredTodos}
        renderItem={(item) => (
          <List.Item
            actions={[
              <Button type="primary" onClick={() => handleEditTodo(item)}>
                Edit
              </Button>,
              <Button type="danger" onClick={() => onDeleteTodo(item.id)}>
                Delete
              </Button>,
            ]}
          >
            <List.Item.Meta
              title={
                <Checkbox
                  checked={item.completed}
                  onChange={() => onToggleComplete(item.id)}
                >
                  <span style={{ textDecoration: item.completed ? 'line-through' : 'none' }}>
                    {item.text}
                  </span>
                </Checkbox>
              }
            />
          </List.Item>
        )}
      />
      <Modal
        title="Edit Task"
        visible={isEditing}
        onCancel={handleCancelEdit}
        footer={[
          <Button key="back" onClick={handleCancelEdit}>
            Cancel
          </Button>,
          <Button key="submit" type="primary" onClick={() => handleSaveEdit}>
            Save
          </Button>,
        ]}
      >
        <Form
          name="edit-todo-form"
          initialValues={{ text: editingTodo ? editingTodo.text : '' }}
          onFinish={handleSaveEdit}
        >
          <Form.Item name="text" label="Task" rules={[{ required: true }]}>
            <InputAnt />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

// App Component
function App() {
  const [todos, setTodos] = useState([]);
  const [filter, setFilter] = useState('all');

  const handleAddTodo = (newTodo) => {
    setTodos([...todos, newTodo]);
  };

  const handleDeleteTodo = (id) => {
    setTodos(todos.filter((todo) => todo.id !== id));
  };

  const handleToggleComplete = (id) => {
    setTodos(
      todos.map((todo) =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      )
    );
  };

  const handleEditTodo = (id, newText) => {
    setTodos(
      todos.map((todo) =>
        todo.id === id ? { ...todo, text: newText } : todo
      )
    );
  };

  const handleDeleteDone = () => {
    setTodos(todos.filter((todo) => !todo.completed));
  };

  const handleDeleteAll = () => {
    setTodos([]);
  };

  return (
    <Layout>
      <Header style={{ padding: '0 24px' }}>
        <h1 style={{ color: 'white' }}>To-Do List</h1>
      </Header>
      <Content style={{ padding: '24px' }}>
        <Row gutter={[16, 16]}>
          <Col span={24}>
            <TodoInput onAddTodo={handleAddTodo} />
          </Col>
          <Col span={24}>
            <TodoList
              todos={todos}
              onDeleteTodo={handleDeleteTodo}
              onToggleComplete={handleToggleComplete}
              onEditTodo={handleEditTodo}
              filter={filter}
              setFilter={setFilter}
              onDeleteDone={handleDeleteDone}
              onDeleteAll={handleDeleteAll}
            />
          </Col>
        </Row>
      </Content>
      <Footer style={{ textAlign: 'center' }}>
        <Space>
          <Button type="danger" onClick={handleDeleteDone} style={{ backgroundColor: '#f5222d', border: 'none' }}>
            Delete done tasks
          </Button>
          <Button type="danger" onClick={handleDeleteAll} style={{ backgroundColor: '#f5222d', border: 'none' }}>
            Delete all tasks
          </Button>
        </Space>
      </Footer>
    </Layout>
  );
}

export default App;
